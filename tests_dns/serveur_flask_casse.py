from flask import Flask, send_from_directory, request, jsonify
import os
import base64

app = Flask(__name__)

# Chemin vers le dossier contenant vos fichiers HTML
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SECRETS_FILE = os.path.join(BASE_DIR, 'secrets.txt')
SUBDOMAINS_FILE = os.path.join(BASE_DIR, 'subdomains_collected.txt')

def collect_subdomains():
    """Collecte tous les sous-domaines depuis le fichier en pr√©servant la casse"""
    try:
        with open(SUBDOMAINS_FILE, 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        return ""

def decode_collected_subdomains():
    """D√©code tous les sous-domaines coll√©s comme un seul message en pr√©servant la casse"""
    collected = collect_subdomains()
    if not collected:
        return "Aucun sous-domaine collect√©"
    
    try:
        # Ajouter le padding n√©cessaire
        padding = '=' * (4 - len(collected) % 4)
        decoded = base64.b64decode(collected + padding).decode('utf-8')
        return decoded
    except Exception as e:
        return f"Erreur de d√©codage: {str(e)} - Contenu: '{collected}'"

@app.before_request
def collect_subdomain():
    """Collecte les sous-domaines en pr√©servant la casse exacte"""
    host = request.host
    parts = host.split('.')
    
    if len(parts) >= 3:
        # Pr√©server la casse exacte du sous-domaine
        subdomain = parts[0]
        
        # Ajouter le sous-domaine au fichier coll√© avec la casse exacte
        with open(SUBDOMAINS_FILE, 'a') as f:
            f.write(subdomain)
        
        # Affichage dans le terminal avec la casse
        print("\n" + "="*80)
        print("üéØ COLLECTE DE SOUS-DOMAINE (CASSE PR√âSERV√âE)")
        print(f"Sous-domaine re√ßu: '{subdomain}'")
        print(f"Longueur: {len(subdomain)} caract√®res")
        
        # Afficher la cha√Æne compl√®te collect√©e
        collected = collect_subdomains()
        print(f"Cha√Æne compl√®te: '{collected}'")
        
        # D√©coder et afficher
        full_message = decode_collected_subdomains()
        print(f"Message d√©cod√©: '{full_message}'")
        print("="*80)
        
        # Sauvegarder le message d√©cod√© avec la casse
        with open(SECRETS_FILE, 'w', encoding='utf-8') as f:
            f.write(f"Sous-domaines collect√©s (avec casse): {collected}\n")
            f.write(f"Message d√©cod√©: {full_message}\n")
            f.write(f"Longueur: {len(collected)}\n")

@app.route('/')
def serve_index():
    """Sert le fichier site_corrige.html"""
    return send_from_directory(BASE_DIR, 'site_corrige.html')

@app.route('/<path:filename>')
def serve_file(filename):
    """Sert n'importe quel fichier du dossier"""
    return send_from_directory(BASE_DIR, filename)

@app.route('/api/reset', methods=['POST'])
def reset_collection():
    """R√©initialise la collection de sous-domaines"""
    try:
        os.remove(SUBDOMAINS_FILE)
        os.remove(SECRETS_FILE)
    except FileNotFoundError:
        pass
    
    return jsonify({"message": "Collection r√©initialis√©e"})

@app.route('/api/message', methods=['GET'])
def get_decoded_message():
    """R√©cup√®re le message complet d√©cod√© avec la casse pr√©serv√©e"""
    message = decode_collected_subdomains()
    collected = collect_subdomains()
    
    return jsonify({
        "collected_subdomains": collected,
        "decoded_message": message,
        "length": len(collected)
    })

@app.route('/api/debug', methods=['GET'])
def debug_subdomains():
    """Debug pour voir exactement ce qui est collect√©"""
    collected = collect_subdomains()
    return jsonify({
        "raw_subdomains": collected,
        "hex_representation": collected.encode('utf-8').hex(),
        "length": len(collected),
        "characters": list(collected)
    })

if __name__ == '__main__':
    # R√©initialiser les fichiers au d√©marrage
    try:
        os.remove(SUBDOMAINS_FILE)
        os.remove(SECRETS_FILE)
    except FileNotFoundError:
        pass
    
    print("\nüïµÔ∏è Serveur Flask avec pr√©servation de la casse!")
    print("üìç URL principale: http://localhost:5000")
    print("üìç Test avec casse: http://SmUgc3VpcyB0b24gcGVyZS4gYmxhYmxhYmxh.localhost:5000")
    print("üìç Fichiers cr√©√©s: subdomains_collected.txt et secrets.txt")
    print("üìù La casse est maintenant pr√©serv√©e pour le d√©codage base64\n")
    
    app.run(host='0.0.0.0', port=5000, debug=True)
